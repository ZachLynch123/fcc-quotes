{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","concat","colors","quote","console","log","react_default","a","createElement","className","style","color","data","author","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNew","setState","quoteIndex","Math","floor","random","state","quotes","length","colorIndex","isloaded","_this2","Axios","get","then","res","quoteArray","_this$state","backgroundColor","src_Card","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAeeA,SAZF,SAAAC,GACA,UAAAC,OAAaD,EAAME,QAA5B,IACQA,EAAkBF,EAAlBE,OAAkBF,EAAVG,MAEhB,OADAC,QAAQC,IAAIL,EAAME,QAEdI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACC,MAAK,GAAAV,OAAKC,KAAYF,EAAMY,KAAKT,OAC7CG,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACC,MAAK,GAAAV,OAAKC,KAAYF,EAAMY,KAAKC,oCCkDtCC,cAtDb,SAAAA,EAAYd,GAAM,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KA0BRsB,UAAY,WACVP,EAAKQ,SAAS,CACZC,WAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAKa,MAAMC,OAAOC,QACzDC,WAAYN,KAAKC,MAAMD,KAAKE,SAAWZ,EAAKa,MAAM1B,OAAO4B,WA5B3Df,EAAKa,MAAQ,CACXC,OAAQ,GACR3B,OAAQ,CAAC,UAAW,UAClB,UAAW,UAAW,WACxBsB,WAAY,EACZO,WAAY,EACZC,UAAU,GARIjB,mFAaE,IAAAkB,EAAAf,KAElBgB,IAAMC,IAAI,0IACPC,KAAK,SAAAC,GACJ,IAAMC,EAAaD,EAAIzB,KAAKiB,OAC5BzB,QAAQC,IAAIiC,EAAW,IACvBL,EAAKV,SAAS,CACZM,OAAQS,EACRN,UAAU,uCAcT,IAAAO,EACoDrB,KAAKU,MAA1D1B,EADCqC,EACDrC,OAAQ6B,EADPQ,EACOR,WAAYF,EADnBU,EACmBV,OAAQL,EAD3Be,EAC2Bf,WAClC,OAFOe,EACuCP,SAG5C1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAC8B,gBAAe,GAAAvC,OAAKC,EAAO6B,MACtDzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiC,EAAD,CAAM7B,KAAMiB,EAAOL,GAAatB,OAAQA,EAAO6B,KAC/CzB,EAAAC,EAAAC,cAAA,UAAQkC,QAASxB,KAAKI,UAAWZ,MAAO,CAACC,MAAK,GAAAV,OAAKC,EAAO6B,MAA1D,eAMDzB,EAAAC,EAAAC,cAAA,+BAjDSmC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.94689f47.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nconst Card = props => {\r\n    let style = `color: ${props.colors}`\r\n    const { colors, quote } = props;\r\n    console.log(props.colors)\r\n    return (\r\n        <div className=\"wrapper\">\r\n        <h1 style={{color: `${colors}`}}>{props.data.quote}</h1>\r\n        <h6 style={{color: `${colors}`}}>{props.data.author}</h6>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport Card from './Card';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quotes: [],\n      colors: ['#000033', '#696969', \n        '#b7410e', '#4d3c63', '#ccccff'],\n      quoteIndex: 1,\n      colorIndex: 1,\n      isloaded: false\n    }\n  }\n  \n\n  componentDidMount() {\n \n    Axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n      .then(res => {\n        const quoteArray = res.data.quotes;\n        console.log(quoteArray[0])\n        this.setState({\n          quotes: quoteArray,\n          isloaded: true\n        });\n      })\n        \n  }\n\n  handleNew = () => {\n    this.setState({\n      quoteIndex: Math.floor(Math.random() * this.state.quotes.length),\n      colorIndex: Math.floor(Math.random() * this.state.colors.length)\n    })\n    \n  }\n\n  render() {\n    let { colors, colorIndex, quotes, quoteIndex, isloaded } = this.state;\n    if(isloaded){\n    return (\n      <div className=\"App\" style={{backgroundColor: `${colors[colorIndex]}`}}>\n        <div className=\"container\">\n          <Card data={quotes[quoteIndex]} colors={colors[colorIndex]} />\n          <button onClick={this.handleNew} style={{color: `${colors[colorIndex]}`}}>New Quote</button>  \n          </div>\n            \n      </div>\n    );\n  }\n  return(<p>Loading....</p>)\n} \n  }\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}